syntax = "proto3";

// protoc --go-grpc_out=. --go_out=. service.proto

option go_package = "./;core_service";

package service;

message Capability {
  int64       id        = 1;
  string      subsystem = 2;
  string      method    = 3;
}

message Role {
  int64               id        = 1;
  string              name      = 2;
  repeated Capability capabilities = 3;
}

message User {
  int64       id          = 1;
  string      first_name  = 2;
  string      last_name   = 3;
  string      mid_name    = 4;
  string      email       = 5;
  string      password    = 6;
  string      group_name  = 7;
  int64       default_role= 8;
  bool        disabled    = 9;
}

message Session {
  string      cookie      = 1;
  int64       user_id     = 2;
  int64       start       = 3;
}

message Nothing {
  bool        dummy       = 1;
}

message UsersFilter {
  Role        role                = 1;
  User        user                = 2;
  Course      course              = 3;
  bool        partial_string_match = 4;
  bool        include_disabled    = 5;
}

message UsersList {
  repeated User users     = 1;
}

message TextReading {
  int64       id          = 1;
  string      title       = 2;
  string      content_type= 3;  // text/mardown by default
  string      data        = 4;
  string      external_url= 5;
}

message File {
  string      name        = 1;
  string      content_type= 2;
  bytes       data        = 3;
}

enum Arch {
  ARCH_ANY    = 0;
  ARCH_X86    = 1;
  ARCH_X86_64 = 2;
  ARCH_ARMV7  = 3;
  ARCH_AARCH64= 4;
}

enum OS {
  OS_ANY      = 0;
  OS_POSIX    = 1;
  OS_LINUX    = 2;
  OS_BSD      = 3;
  OS_WINDOWS  = 4;
}


message GradingPlatform {
  Arch            arch        = 1; // ARCH_ANY for generic problems
  OS              os          = 2; // OS_ANY for too generic problems, OS_POSIX for most common
  repeated string compilers   = 3; // gcc, g++, gas, javac, and so on
  repeated string tools       = 4; // additional tools required like cmake
  repeated string libraries   = 5; // additional libraries required (in terms of pkg-config for C/C++)
}

message GradingLimits {
  int64           memory_limit_mb     = 1;
  int64           cpu_time_limit_sec  = 2;
  int64           real_time_limit_sec = 3;
  // todo more options
}

message GradingOptions {
  GradingPlatform   platform_required     = 1; // to match corresponding grader client
  GradingLimits     limits                = 2;
}

message Problem {
  string          id                      = 1;  // string, but not int! id is a relative path to the problem directory
  string          statement_text          = 2;
  string          statement_content_type  = 3;  // text/mardown by default
  repeated File   statement_files         = 4;
  repeated File   solution_files          = 5;  // fileset meta-information to be filled by solution
  float           full_score_multiplier   = 6;  // 1.0 by default, >1 for hard problems, <1 for easy problems
  bool            blocks_positive_mark    = 7;
  bool            blocks_next_lesson      = 8;
  bool            accept_partial_tests    = 9;
  bool            skip_solution_defence   = 10;
  bool            skip_code_review        = 11;
  GradingOptions  grading_options         = 12;
}

enum SolutionStatus {
  SUBMITTED           = 0;
  GRADE_IN_PROGRESS   = 1;
  COMPILATION_ERROR   = 2;
  VERY_BAD            = 3;  // no one test passed
  ACCEPTABLE          = 4;  // grade score > 0 (if accept partial solution) or score is full
  CODE_REVIEW_REJECTED= 5;
  DEFENCE_FAILED      = 6;
  PLAGIARISM_DETECTED = 7;
  DISQUALIFIED        = 8;
  OK                  = 100;
}

message ReviewComment {
  int64               id            = 1;
  string              related_file  = 2;  // might be empty in case if solution has just one file
  int64               start_position= 3;  // position in text (chars count, not lines or bytes)
  int64               end_position  = 4;  // position in text (chars count, not lines or bytes)
}

message CodeReview {
  int64                   id            = 1;
  User                    author        = 2;
  repeated ReviewComment  code_comments = 3;
  string                  global_comment= 4;
}

message Submission {
  int64               id            = 1;
  repeated File       solution_files= 2;
  SolutionStatus      status        = 3;
  float               grader_score  = 4;
  string              grader_name   = 5;  // id of grader that processed submission
  string              grader_output = 6;  // stdout output by testing system
  string              grader_errors = 7;  // stderr output by testing system
  CodeReview          code_review   = 8;
}

message Solution {
  int64                id      = 1;
  Problem              problem = 2;  // must contain at least Problem.id
  repeated Submission  history = 3;
}

message Lesson {
  int64                 id            = 1;
  repeated  TextReading readings      = 2;
  repeated  Problem     problems      = 3;
  int64                 open_date     = 4;  // 0 for inherit from outer section
  int64                 soft_deadline = 5;  // 0 for inherit from outer section
  int64                 hard_deadline = 6;  // 0 for inherit from outer section
}

message Section {
  int64                 id            = 1;
  string                name          = 2;
  repeated Lesson       lessons       = 3;
  int64                 open_date     = 4;
  int64                 soft_deadline = 5;
  int64                 hard_deadline = 6;
}

message Course {
  int64             id          = 1;
  string            name        = 2;
  repeated Section  sections    = 3;
}

message Enrolment {
  Course      course      = 1;
  User        user        = 2;
  Role        role        = 3;
}

message UserRole {
  User        user        = 1;
  Role        role        = 2;
}


service UserManagement {
  rpc Authorize(User) returns (Session) {}
  rpc GetProfile(Session) returns (User) {}
  rpc CreateOrUpdateRole(Role) returns (Role) {}
  rpc FindOrCreateCapability(Capability) returns (Capability) {}
  rpc GetUsers(UsersFilter) returns (UsersList) {}
  rpc SetUserDefaultRole(UserRole) returns (UserRole) {}
  rpc CreateOrUpdateUser(User) returns (User) {}
  rpc ResetUserPassword(User) returns (User) {}
  rpc ChangePassword(User) returns (User) {}
}

message Enroll {
  Course        course  = 1;
  User          user    = 2;
  Role          role    = 3;
}

service CourseManagement {
  rpc CreateOrUpdateCourse(Course) returns (Course) {}
  rpc EnrollUser(Enroll) returns (Course) {}
  rpc CloneCourse(Course) returns (Course) {}
  rpc CreateOrUpdateLesson(Lesson) returns (Lesson) {}
  rpc CreateOrUpdateSection(Section) returns (Section) {}
  rpc UpdateSectionLessons(Section) returns (Section) {}
  rpc UpdateCourseSections(Course) returns (Course) {}
  rpc CreateOrUpdateTextReading(TextReading) returns (TextReading) {}
  rpc CreateOrUpdateProblem(Problem) returns (Problem) {}
}

message GraderProperties {
  string          name        = 1;
  GradingPlatform platform    = 2;
}

service SubmissionsManagement {
  // anounce grader alive and receive stream of submissions to be graded
  rpc ReceiveSubmissionsToGrade(GraderProperties) returns (stream Submission) {}

  // argument filled by id, status, grader_score, grader_name, grader_output, grader_errors
  rpc UpdateGraderOutput(Submission) returns (Submission) {}
}
