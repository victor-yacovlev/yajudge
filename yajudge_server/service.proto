syntax = "proto3";

// protoc --go-grpc_out=. --go_out=. service.proto

option go_package = "./;core_service";

package service;

enum Role {
  ROLE_ANY                = 0;
  ROLE_UNAUTHORIZED       = 1;
  ROLE_STUDENT            = 2;
  ROLE_TEACHER_ASSISTANT  = 3;
  ROLE_TEACHER            = 4;
  ROLE_LECTUER            = 5;
  ROLE_ADMINISTRATOR      = 6;
}

message User {
  int64       id          = 1;
  string      first_name  = 2;
  string      last_name   = 3;
  string      mid_name    = 4;
  string      email       = 5;
  string      password    = 6;
  string      group_name  = 7;
  Role        default_role= 8;
  bool        disabled    = 9;
}

message Session {
  string      cookie      = 1;
  int64       user_id     = 2;
  int64       start       = 3;
}

message Nothing {
  bool        dummy       = 1;
}

message UsersFilter {
  Role        role                = 1;
  User        user                = 2;
  Course      course              = 3;
  bool        partial_string_match = 4;
  bool        include_disabled    = 5;
}

message UsersList {
  repeated User users     = 1;
}

message TextReading {
  string      id          = 1;
  string      title       = 3;
  string      content_type= 4;  // text/mardown by default
  string      data        = 5;  // encoded in base64 if content-type not starts with 'text/'
  int64       time_to_read= 6;  // average time to read in seconds
}

message File {
  string      name        = 1;
  bytes       data        = 2;
  string      description = 3;
}

message FileSet {
  repeated File   files = 1;
}

enum Arch {
  ARCH_ANY    = 0;
  ARCH_X86    = 1;
  ARCH_X86_64 = 2;
  ARCH_ARMV7  = 3;
  ARCH_AARCH64= 4;
}

enum OS {
  OS_ANY      = 0;
  OS_POSIX    = 1;
  OS_LINUX    = 2;
  OS_BSD      = 3;
  OS_WINDOWS  = 4;
}


message GradingPlatform {
  Arch            arch        = 1; // ARCH_ANY for generic problems
  OS              os          = 2; // OS_ANY for too generic problems, OS_POSIX for most common
  repeated string compilers   = 3; // gcc, g++, gas, javac, and so on
  repeated string tools       = 4; // additional tools required like cmake
  repeated string libraries   = 5; // additional libraries required (in terms of pkg-config for C/C++)
}

message GradingLimits {
  int64           memory_limit_mb     = 1;
  int64           cpu_time_limit_sec  = 2;
  int64           real_time_limit_sec = 3;
  int64           procs_count_limit   = 4;
  int64           fds_count_limit     = 5;
  // todo more options
}

message TestCase {
  bool            blocks_submission           = 1; // important in case if patial tests allowed, ignored otherwise
  string          description                 = 2; // optional
  string          command_line_arguments      = 3; // optional
  File            stdin_data                  = 4;
  File            stdout_reference            = 5;
  File            stderr_reference            = 6;
  int64           retval_reference            = 7;
  FileSet         input_extra_files           = 8;
  FileSet         output_reference_extra_files= 9;
}

message GradingOptions {
  GradingPlatform   platform_required     = 1; // to match corresponding grader client
  GradingLimits     limits                = 2;
  repeated TestCase test_cases            = 3;
  string            standard_checker      = 4; // named by ejudge checkers name
  string            standard_checker_opts = 5; // like ejudge checker environment
  FileSet           custom_checker        = 6; // checker source files
  FileSet           custom_interactor     = 7; // interactor soure files
}

message CodeStyle {
  string  source_file_suffix  = 1;
  File    style_file          = 2;
}

message ProblemData {
  // These data structures are not stored in database, but attached to courses via Problem records

  string          id                            = 1;  // string, but not int! id is a relative path to the problem directory
  string          unique_id                     = 2;  // problem id to match previous years cheaters matching
  string          title                         = 3;
  string          statement_text                = 4;
  string          statement_content_type        = 5;  // text/mardown by default or text/html for legacy statements
  FileSet         statement_files               = 6;  // public files for students
  FileSet         solution_files                = 7;  // fileset meta-information to be filled by solution
  FileSet         grader_files                  = 8;  // private files for grading
  double          full_score_multiplier_propose = 9;  // 1.0 by default, >1 for hard problems, <1 for easy problems
  GradingOptions  grading_options               = 10;

  // This is problem property but not a problem usage in course/lesson property!
  // Cons: the problem solution might be demonstrated sometime in past at another course
  bool            skip_plagiarism_check         = 11;
}

message ProblemMetadata {
  string          id                      = 1; // matches problem data id
  double          full_score_multiplier   = 2;
  bool            blocks_next_problems    = 3;
  bool            skip_solution_defence   = 4;
  bool            skip_code_review        = 5;
}


enum SolutionStatus {
  ANY_STATUS          = 0;
  SUBMITTED           = 1;
  GRADE_IN_PROGRESS   = 2;
  STYLE_CHECK_ERROR   = 3;
  COMPILATION_ERROR   = 4;
  VERY_BAD            = 5;  // no one test passed
  ACCEPTABLE          = 6;  // grade score > 0 (if accept partial solution) or score is full
  PENDING_REVIEW      = 7;
  CODE_REVIEW_REJECTED= 8;
  DEFENCE_FAILED      = 10;
  PLAGIARISM_DETECTED = 11;
  DISQUALIFIED        = 12;
  OK                  = 100;
}

message ReviewComment {
  int64               id              = 1;
  int64               code_reviews_id = 2;
  string              related_file    = 3;  // might be empty in case if solution has just one file
  int64               start_position  = 4;  // position in text (chars count, not lines or bytes)
  int64               end_position    = 5;  // position in text (chars count, not lines or bytes)
}

message CodeReview {
  int64                   id            = 1;
  int64                   submission_id = 2;
  User                    author        = 3;
  repeated ReviewComment  code_comments = 4;
  string                  global_comment= 5;
}

message Submission {
  int64               id            = 1;
  User                user          = 2;
  Course              course        = 3;
  int64               timestamp     = 4;
  FileSet             solution_files= 5;
  SolutionStatus      status        = 6;
  double              grader_score  = 7;
  string              grader_name   = 8;  // id of grader that processed submission
  string              grader_output = 9;  // stdout output by testing system
  string              grader_errors = 10;  // stderr output by testing system
  CodeReview          code_review   = 11;
  ProblemData         problem       = 12; // just references Problem.id in most cases, but contains full data for grader
}

message Solution {
  int64                id      = 1;
  ProblemData          problem = 2;  // must contain at least Problem.id
  repeated Submission  history = 3;
}

message Lesson {
  string                    id                = 1;
  string                    name              = 3;
  string                    description       = 4;
  repeated TextReading      readings          = 5;
  repeated ProblemData      problems          = 6;
  repeated ProblemMetadata  problems_metadata = 7;
  int64                     open_date         = 8;    // 0 for inherit from outer section
  int64                     soft_deadline     = 9;    // 0 for inherit from outer section
  int64                     hard_deadline     = 10;   // 0 for inherit from outer section
}

message Section {
  string                id            = 1;
  string                name          = 2;
  string                description   = 3;
  repeated Lesson       lessons       = 4;
  int64                 open_date     = 5;  // all dates are relative to course run start datetime
  int64                 soft_deadline = 6;
  int64                 hard_deadline = 7;
}

// Courses are stored in filesystem directories but not in database.
// ID is a string path after the courses root directory.
message CourseData {
  string                  id                      = 1;
  string                  description             = 2;
  repeated Section        sections                = 3;
  int32                   max_submissions_per_hour= 4;
  int32                   max_submission_file_size= 5;
  repeated CodeStyle      code_styles             = 6;
}

message Course {
  int64             id            = 1;
  string            name          = 2;
  CourseData        course_data   = 3;
  int64             course_start  = 4;  // UTC timestamp for course start, other times are relative
  string            url_prefix    = 5;
}

message Enrolment {
  Course      course      = 1;
  User        user        = 2;
  Role        role        = 3;
}

message UserRole {
  User        user        = 1;
  Role        role        = 2;
}



service UserManagement {
  rpc Authorize(User) returns (Session) {}
  rpc GetProfile(Session) returns (User) {}
  rpc GetUsers(UsersFilter) returns (UsersList) {}
  rpc SetUserDefaultRole(UserRole) returns (UserRole) {}
  rpc CreateOrUpdateUser(User) returns (User) {}
  rpc BatchCreateStudents(UsersList) returns (UsersList) {}  // returns same users with ID's set
  rpc BatchDeleteUsers(UsersList) returns (Nothing) {}
  rpc DeleteUser(User) returns (Nothing) {}
  rpc ResetUserPassword(User) returns (User) {}
  rpc ChangePassword(User) returns (User) {}
}

message Enroll {
  Course        course  = 1;
  User          user    = 2;
  Role          role    = 3;
}

message CoursesFilter {
  User          user                  = 1;  // courses available to specified user, no filter in case of User.id==0
  Course        course                = 2;  // filter by name, no filter in case of Course.id==0
  bool          partial_string_match  = 3;
}

message CoursesList {
  message CourseListEntry {
    Course  course  = 1;
    Role    role    = 2;
  }
  repeated CourseListEntry  courses = 1;
}

message CourseContentRequest {
  string                course_data_id  = 1;
  int64                 cached_timestamp= 2;
}

enum CourseContentStatus {
  HAS_DATA        = 0;
  NOT_CHANGED     = 1;
}

message CourseContentResponse {
  string                course_data_id  = 1;
  CourseContentStatus   status          = 2;
  CourseData            data            = 3;
  int64                 last_modified   = 4;
}

// message sent when user have read (scrolled) text reading
// to mark reading 'passed' and estimate average reading time
message TextReadingDone {
  User        user      = 1;  // id only important
  Course      course    = 2;  // id only important
  Section     section   = 3;  // id only important
  Lesson      lesson    = 4;  // id only important
  TextReading reading   = 5;  // id only important
  int64       time      = 6;  // in seconds from page load to leave
}

service CourseManagement {
  rpc CreateOrUpdateCourse(Course) returns (Course) {}
  rpc EnrollUser(Enroll) returns (Course) {}
  rpc CloneCourse(Course) returns (Course) {}
  rpc DeleteCourse(Course) returns (Nothing) {}
  rpc GetCourses(CoursesFilter) returns (CoursesList) {}
  rpc GetCoursePublicContent(CourseContentRequest) returns (CourseContentResponse) {}
}

message GraderProperties {
  string          name        = 1;
  GradingPlatform platform    = 2;
}

message SubmissionsCountLimit {
  int32   attempts_left   = 1;
  int64   next_time_reset = 2;
  int64   server_time     = 3;
}

message CheckSubmissionsLimitRequest {
  User    user            = 1;  // just user id
  Course  course          = 2;  // just course id
  string  problem_id      = 3;
}

message SubmissionList {
  repeated Submission   submissions = 1;
}

message SubmissionFilter {
  User            user            = 1;
  Course          course          = 2;
  string          problem_id      = 3;
  SolutionStatus  status          = 4;
}

service SubmissionManagement {
  rpc CheckSubmissionsCountLimit(CheckSubmissionsLimitRequest) returns (SubmissionsCountLimit) {}
  rpc SubmitProblemSolution(Submission) returns (Submission) {}
  rpc GetSubmissions(SubmissionFilter) returns (SubmissionList) {}

  // anounce grader alive and receive stream of submissions to be graded
  rpc ReceiveSubmissionsToGrade(GraderProperties) returns (stream Submission) {}
  // argument filled by id, status, grader_score, grader_name, grader_output, grader_errors
  rpc UpdateGraderOutput(Submission) returns (Submission) {}
}

