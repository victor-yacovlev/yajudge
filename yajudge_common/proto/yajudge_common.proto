syntax = 'proto3';

package yajudge;

enum Role {
  ROLE_ANY                = 0;
  ROLE_UNAUTHORIZED       = 1;
  ROLE_STUDENT            = 2;
  ROLE_TEACHER_ASSISTANT  = 3;
  ROLE_TEACHER            = 4;
  ROLE_LECTURER           = 5;
  ROLE_ADMINISTRATOR      = 6;
}

message User {
  int64  id = 1;
  string first_name = 2;
  string last_name = 3;
  string mid_name = 4;
  string email = 5;
  string password = 6;
  string group_name = 7;
  Role   default_role= 8;
  bool   disabled = 9;
  string login = 10;   // alternate way to log in instead of id and email
}

message Session {
  string      cookie      = 1;
  User        user        = 2;
  int64       start       = 3;    // timestamp
  string      initial_route=4;    // initial route on user login
  string      user_encrypted_data = 100; // to use instead of cookie by microservices
}

message Nothing {
  bool        dummy       = 1;
}

message UsersFilter {
  Role        role                = 1;
  User        user                = 2;
  Course      course              = 3;
  bool        partial_string_match = 4;
  bool        include_disabled    = 5;
}

message UsersList {
  repeated User users     = 1;
}


message File {
  string      name        = 1;
  bytes       data        = 2;
  string      description = 3;
  int32       permissions = 4; // unix permissions & 0777, use only for test case files
}

message FileSet {
  repeated File   files = 1;
}

message TextReading {
  string      id          = 1;
  string      title       = 3;
  string      content_type= 4;  // text/markdown by default
  string      data        = 5;  // encoded in base64 if content-type not starts with 'text/'
  FileSet     resources   = 7;
}


enum Arch {
  ARCH_ANY    = 0;
  ARCH_X86    = 1;
  ARCH_X86_64 = 2;
  ARCH_ARMV7  = 3;
  ARCH_AARCH64= 4;
}

message GradingPlatform {
  Arch            arch                 = 1;  // ARCH_ANY for generic problems
}

message GradingLimits {
  int32           stack_size_limit_mb = 1;
  int32           memory_max_limit_mb = 2;
  int32           cpu_time_limit_sec  = 3;
  int32           real_time_limit_sec = 4;
  int32           proc_count_limit    = 5;
  int32           fd_count_limit      = 6;
  int32           stdout_size_limit_mb= 7;
  int32           stderr_size_limit_mb= 8;
  bool            allow_network       = 9;
  int32           new_proc_delay_msec = 11;
}

message SecurityContext {
  repeated string forbidden_functions = 1;
  repeated string allowed_functions = 2;
}

message TestCase {
  bool            blocks_submission           = 1; // important in case if partial tests allowed, ignored otherwise
  string          description                 = 2; // optional
  string          command_line_arguments      = 3; // optional
  File            stdin_data                  = 4;
  File            stdout_reference            = 5;
  File            stderr_reference            = 6;
  File            directory_bundle            = 7; // runtime files
  File            build_directory_bundle      = 8; // additional files to build solution
}

enum ExecutableTarget {
  AutodetectExecutable = 0;

  // text scripts
  ShellScript = 1;
  PythonScript = 2;

  // native executables
  Native = 10;
  NativeWithSanitizers = 11;
  NativeWithValgrind = 12;

  NativeWithSanitizersAndValgrind = 13; // expands to two targets: sanitizers and valgrind

  // jre code
  JavaClass = 21;
  JavaJar = 22;

  // QEMU disk images
  QemuSystemImage = 31;
}

enum BuildSystem {
  AutodetectBuild = 0;
  SkipBuild = 1;

  PythonCheckers = 10;   // Python language
  ClangToolchain = 20;   // C, C++, ASM
  MakefileProject = 30;  // custom projects
  CMakeProject = 40;     // custom projects
  GoLangProject = 50;    // Go
  JavaPlainProject = 60; // Java
  MavenProject = 61;     // maven using pom.xml
}

message GradingOptions {
  GradingPlatform     platform_required     = 1; // to match corresponding grader client
  GradingLimits       limits                = 6;
  repeated TestCase   test_cases            = 7;
  string              standard_checker      = 8; // named by ejudge checkers name
  string              standard_checker_opts = 9; // like ejudge checker environment
  File                custom_checker        = 10;// checker source file
  File                interactor            = 11;// interactor source file
  repeated CodeStyle  code_styles           = 12;// just copied from parent course for convince
  FileSet             extra_build_files     = 13;
  File                tests_generator       = 16;
  File                coprocess             = 17;// supplementary program or script running the same unshare namespace
  ExecutableTarget    executable_target     = 20;
  BuildSystem         build_system          = 21;
  map<string,string>  build_properties      = 22;
  map<string,string>  target_properties     = 23;
  SecurityContext     security_context      = 30;
  bool                tests_requires_build  = 40;
}

message CodeStyle {
  string  source_file_suffix  = 1;
  File    style_file          = 2;
}

message ProblemData {
  // These data structures are not stored in database, but attached to courses via Problem records

  string          id                            = 1;  // string, but not int! id is a relative path to the problem directory
  string          unique_id                     = 2;  // problem id to match previous years cheaters matching
  string          title                         = 3;
  string          statement_text                = 4;
  string          statement_content_type        = 5;  // text/markdown by default or text/html for legacy statements
  FileSet         statement_files               = 6;  // public files for students
  FileSet         solution_files                = 7;  // fileset meta-information to be filled by solution
  FileSet         grader_files                  = 8;  // private files for grading
  double          full_score_multiplier_propose = 9;  // 1.0 by default, >1 for hard problems, <1 for easy problems
  GradingOptions  grading_options               = 10;

  // This is problem property but not a problem usage in course/lesson property!
  // Cons: the problem solution might be demonstrated sometime in past at another course
  bool            skip_plagiarism_check         = 11;

  int32           max_submissions_per_hour= 12;
  int32           max_submission_file_size= 13;
}

message ProblemMetadata {
  string          id                      = 1; // matches problem data id
  double          full_score_multiplier   = 2;
  bool            blocks_next_problems    = 3;
  bool            skip_solution_defence   = 4;
  bool            skip_code_review        = 5;
  Deadlines       deadlines               = 10;
}


enum SolutionStatus {
  ANY_STATUS_OR_NULL  = 0;
  STYLE_CHECK_ERROR   = 3;
  COMPILATION_ERROR   = 4;
  WRONG_ANSWER        = 5;
  SUMMON_FOR_DEFENCE  = 6;
  PENDING_REVIEW      = 7;
  CODE_REVIEW_REJECTED= 8;
  DISQUALIFIED        = 12;
  CHECK_FAILED        = 13;
  RUNTIME_ERROR       = 14;
  TIME_LIMIT          = 15;
  VALGRIND_ERRORS     = 16;
  OK                  = 100;

  // Values from 300 are possible at UI usage only and should not appear in database!
  HARD_DEADLINE_PASSED= 300;
}

enum SubmissionProcessStatus {
  PROCESS_QUEUED = 0;
  PROCESS_ASSIGNED = 1;
  PROCESS_DONE = 2;
}

message ProblemStatus {
  string              problem_id = 1;
  bool                blocks_next = 2;
  bool                blocked_by_previous = 3;
  bool                completed = 4;
  int32               score_got = 5;
  int32               score_max = 6;
  int64               submitted = 7;      // real time
  int32               deadline_penalty_total = 10;
  SolutionStatus      final_solution_status = 11;
  SubmissionsCountLimit submission_count_limit = 12;
  repeated Submission submissions = 13;
  SubmissionProcessStatus final_grading_status = 20;

}

message LessonStatus {
  string              lesson_id = 1;
  repeated ProblemStatus problems = 2;
  bool                blocked_by_previous = 3;
  bool                blocks_next = 4;
  bool                completed = 5;
  double              score_got = 6;
  double              score_max = 7;
}

message SectionStatus {
  string              section_id = 1;
  repeated LessonStatus lessons = 2;
  bool                blocked_by_previous = 3;
  bool                blocks_next = 4;
  bool                completed = 5;
  double              score_got = 6;
  double              score_max = 7;
}

message CourseStatus {
  Course              course = 1;
  User                user = 2;
  repeated SectionStatus sections = 3;
  int64               hard_deadline = 4;
  bool                completed = 5;
  double              score_got = 6;
  double              score_max = 7;
  int32               problems_total = 8;
  int32               problems_required = 9;
  int32               problems_solved = 10;
  int32               problems_required_solved = 11;
}

message TestResult {
  string              target        = 1;
  SolutionStatus      status        = 2;
  int32               test_number   = 3;
  string              stdout        = 4;
  string              stderr        = 5;
  int32               exit_status   = 6;
  int32               signal_killed = 7;
  bool                standard_match = 8;
  bool                killed_by_timer = 9;
  string              valgrind_output = 10;
  int32               valgrind_errors = 11;
  string              checker_output = 12;
  string              build_error_log = 13;  // if test has custom build files
}

message Submission {
  int64               id            = 1;
  User                user          = 2;
  Course              course        = 3;
  int64               datetime      = 4;  // seconds since epoch UTC
  FileSet             solution_files= 5;
  SolutionStatus      status        = 6;
  double              grader_score  = 7;
  string              grader_name   = 8;  // id of grader that processed submission
  string              style_error_log = 9;
  string              build_error_log  = 10;
  CodeReview          code_review   = 11;
  string              problem_id    = 12;
  repeated TestResult test_results  = 13;

  // Cheat detection
  double              maximum_similarity_found = 20;

  SubmissionProcessStatus grading_status = 100;
  SubmissionProcessStatus cheat_check_status = 101;

  // not to be stored directly in database
  int64               soft_deadline = 300;
  int64               hard_deadline = 301;
}

message Solution {
  int64                id      = 1;
  ProblemData          problem = 2;  // must contain at least Problem.id
  repeated Submission  history = 3;
}

message Deadlines {
  // all durations are in seconds
  int32                soft_deadline = 1;
  int32                hard_deadline = 2;
  int32                soft_penalty = 3;
}

message LessonSchedule {
  int64   datetime = 1; // seconds from epoch (UTC)

  // the fields below are in use for database storage but should be expanded into plain schedule entries
  int32   repeat_count = 10;
  int32   repeat_interval = 11; // in seconds
}

message LessonScheduleSet {
  map<string, int64> schedules = 1; // lesson full id (delimited by '/' and normalized) ---> seconds from epoch (UTC)
}

message Lesson {
  string                    id                = 1;
  string                    name              = 3;
  string                    description       = 4;
  repeated TextReading      readings          = 5;
  repeated ProblemData      problems          = 6;
  repeated ProblemMetadata  problems_metadata = 7;
  Deadlines                 deadlines = 10;
}

message Section {
  string                id            = 1;
  string                name          = 2;
  string                description   = 3;
  repeated Lesson       lessons       = 4;
  Deadlines             deadlines = 10;
}

// Courses are stored in filesystem directories but not in database.
// ID is a string path after the courses root directory.
message CourseData {
  string                  id                      = 1;
  string                  description             = 2;
  repeated Section        sections                = 3;
  int32                   max_submissions_per_hour= 4;
  int32                   max_submission_file_size= 5;
  repeated CodeStyle      code_styles             = 6;
  GradingLimits           default_limits          = 7;
  Deadlines               deadlines     = 10;
}

message Course {
  int32             id            = 1;
  string            name          = 2;
  string            data_id       = 3;
  string            url_prefix    = 5;
  bool              disable_review = 7;
  bool              disable_defence = 8;
  string            description = 9;
}

message Enrollment {
  Course      course      = 1;
  User        user        = 2;
  Role        role        = 3;
  string      group_pattern = 4;
}

message UserRole {
  User        user        = 1;
  Role        role        = 2;
}

message CoursesFilter {
  User          user                  = 1;  // courses available to specified user, no filter in case of User.id==0
  Course        course                = 2;  // filter by name, no filter in case of Course.id==0
  bool          partial_string_match  = 3;
}

message CoursesList {
  message CourseListEntry {
    Course  course  = 1;
    Role    role    = 2;
  }
  repeated CourseListEntry  courses = 1;
}

message CourseContentRequest {
  string      course_data_id  = 1;
  int64       cached_timestamp= 2;
}

message ProblemContentRequest {
  string      course_data_id = 1;
  string      problem_id = 2;
  int64       cached_timestamp = 3;
}

enum ContentStatus {
  HAS_DATA        = 0;
  NOT_CHANGED     = 1;
}

message ProblemContentResponse {
  string          course_data_id = 1;
  string          problem_id = 2;
  int64           last_modified = 3;
  ContentStatus   status = 4;
  ProblemData     data = 5;
}

message CourseContentResponse {
  string                course_data_id  = 1;
  ContentStatus         status          = 2;
  CourseData            data            = 3;
  int64                 last_modified   = 4;
}

// message sent when user have read (scrolled) text reading
// to mark reading 'passed' and estimate average reading time
message TextReadingDone {
  User        user      = 1;  // id only important
  Course      course    = 2;  // id only important
  Section     section   = 3;  // id only important
  Lesson      lesson    = 4;  // id only important
  TextReading reading   = 5;  // id only important
  int64       time      = 6;  // in seconds from page load to leave
}

message CourseProgressRequest {
  Course      course = 1;
  string      name_filter = 2;
  bool        include_problem_details = 3;
}

message CourseStatusEntry {
  User                    user = 1;
  repeated ProblemStatus  statuses = 2;
  repeated double         scores = 3;
  bool                    course_completed = 4;
  double                  score_got = 5;
  double                  score_max = 6;
}

message CourseProgressResponse {
  repeated CourseStatusEntry  entries = 1;
  repeated ProblemData        problems = 2;
}

message LessonScheduleRequest {
  Course      course = 1;
  User        user = 2;
}

message EnrollUserRequest {
  Course        course  = 1;
  User          user    = 2;
  Role          role    = 3;
  string        group_pattern = 4;
}

message EnrollGroupRequest {
  Course        course = 1;
  string        group_pattern = 2;
}

message GroupEnrollmentsRequest {
  Course        course = 1;
  string        group_pattern = 2;
}

message GroupEnrollments {
  int32         id = 1;
  string        group_pattern = 2;
  repeated User group_students = 3;
  repeated User foreign_students = 4;
  repeated User teachers = 5;
  repeated User assistants = 6;
}

message AllGroupsEnrollments {
  Course course = 1;
  repeated GroupEnrollments groups = 2;
}

message UserEnrollments {
  repeated Enrollment enrollments = 1;
}

enum ServiceRole {
  SERVICE_GRADING = 0;
  SERVICE_CHEAT_CHECKING = 1;
}

message ConnectedServiceProperties {
  string          name        = 1;
  GradingPlatform platform    = 2;
  double          performance_rating = 3; // higher is better: 1_000_000/(time_in_ms_for_20000_primes_generation)
  bool            arch_specific_only_jobs = 4;
  int32           number_of_workers = 5;  // number of CPU cores available to grade in parallel

  ServiceRole     role = 10;
}


message SubmissionsCountLimit {
  int32   attempts_left   = 1;
  int64   next_time_reset = 2;
  int64   server_time     = 3;
}


message SubmissionList {
  repeated Submission   submissions = 1;
}

message SubmissionFilter {
  User            user            = 1;
  Course          course          = 2;
  string          problem_id      = 3;
  SolutionStatus  status          = 4;
}

message CheckCourseStatusRequest {
  User    user      = 1;
  Course  course    = 2;
}

message ProblemStatusRequest {
  User    user      = 1;
  Course  course    = 2;
  string  problem_id = 3;
}

message RejudgeRequest {
  User        user = 1;
  Course      course = 2;
  string      problem_id = 3;
  Submission  submission = 4;
  bool        only_failed_submissions = 5;
}

message LocalGraderSubmission {
  Submission        submission = 1;
  GradingLimits     grading_limits = 2;
}

message SubmissionListQuery {
  int64             submission_id = 1;  // ignore rest fields if > 0
  int32             course_id = 2;
  string            name_query = 3;
  string            problem_id_filter = 4;
  SolutionStatus    status_filter = 5;
  bool              show_mine_submissions = 6;
  int32             limit = 20;
  int32             offset = 21;
}

message SubmissionListNotificationsRequest {
  SubmissionListQuery filter_request = 1;
  repeated int64      submission_ids = 2;
}

message SubmissionListEntry {
  int64             submission_id = 1;
  SolutionStatus    status = 2;
  User              sender = 3;
  int64             datetime = 4;
  string            problem_id = 5;
  bool              hard_deadline_passed = 6;
  SubmissionProcessStatus grading_status = 10;
}

message SubmissionListResponse {
  repeated SubmissionListEntry entries = 1;
  int32     total_count = 2;
  SubmissionListQuery query = 3;
}

message Empty {}

enum ServiceStatus {
  SERVICE_STATUS_UNKNOWN = 0;
  SERVICE_STATUS_IDLE = 1;
  SERVICE_STATUS_BUSY = 2;
  SERVICE_STATUS_SHUTTING_DOWN = 3;
}

message ConnectedServiceStatus {
  ConnectedServiceProperties properties = 1;
  ServiceStatus status = 2;
  int32 capacity = 3;
}

message SolutionExternalSource {
  int64   id = 1;
  string  known_url = 2;
  string  known_author = 3;
  string  problem_id = 4;
}

message SolutionSource {
  oneof what {
    Submission submission = 1;
    SolutionExternalSource external = 2;
  }
}

message SolutionData {
  FileSet file_set = 1;
  SolutionSource source = 2;
}

message DiffViewRequest {
  SolutionSource first = 1;
  SolutionSource second = 2;
}

enum DiffOperationType {
  LINE_EQUAL = 0;
  LINE_DIFFER = 1;
  LINE_DELETED = 2;
  LINE_INSERTED = 3;
}

message LineRange {
  int32 start = 1;
  int32 end = 2;
}

message DiffOperation {
  LineRange from = 1;
  LineRange to = 2;
  DiffOperationType operation = 3;
}

message DiffData {
  string file_name = 1;
  string first_text = 2;
  string second_text = 3;
  repeated DiffOperation operations = 4;
}

message DiffViewResponse {
  repeated DiffData diffs = 1;
  DiffViewRequest request = 2;
}

message LineComment {
  int32 line_number = 1;  // starting from 0
  string context = 2;     // short line text to be shown in history
  string message = 3;
  string file_name = 4;
}

message CodeReview {
  int64                   id            = 1;
  int64                   datetime      = 2;  // seconds from epoch UTC
  int64                   submission_id = 3;
  User                    author        = 4;
  repeated LineComment    line_comments = 5;
  string                  global_comment= 6;
  SolutionStatus          new_status    = 7;
}

message ReviewHistory {
  repeated CodeReview   reviews = 1;
}

message CourseEntryPoint {
  string url_prefix = 1;
}
